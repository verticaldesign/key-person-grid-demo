{"version":3,"sources":["generate-mock-data.js","App.js","serviceWorker.js","index.js"],"names":["chance","Chance","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onGridReady","params","setState","gridApi","api","columnApi","state","sizeColumnsToFit","window","addEventListener","addPerson","event","preventDefault","newId","hash","length","newColDef","headerName","newPerson","field","valueFormatter","value","editable","cellClass","concat","aggFunc","updatedRowData","rowData","map","el","temp","columnDefs","setColumnDefs","addFunctionalArea","newArea","functionalArea","newRowData","objectSpread","keys","handleFAChange","e","target","handleAddPersonChange","defaultColDef","resizable","sortable","generatedData","NameList","colorRange","mockData","aggRange","generateRow","peopleList","areaName","newRow","i","natural","min","max","keyArea","groupHack","columnIds","defsList","suppressSizeToFit","pinned","rowGroup","groupDefaultExpanded","hide","width","menuTabs","filter","valueGetter","total","data","curr","parseInt","cellStyle","node","aggData","values","sort","a","b","forEachNode","x","reduce","acc","push","d3","domain","interpolate","range","rowTotal","backgroundColor","colDef","generateHeaders","areaNameList","count","sentence","words","generateAreaNames","generateMockData","react_default","createElement","className","style","height","type","onChange","onClick","main","suppressAggFuncInHeader","autoGroupColumnDef","checkbox","cellRenderer","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4259b2e.chunk.js","sourcesContent":["import Chance from 'chance';\r\nimport * as d3 from 'd3';\r\n\r\nconst chance = new Chance();\r\n\r\nexport const generateMockData = NameList => {\r\n    let mockData = [];\r\n    let aggDataRow = [];\r\n    let aggRange = [];\r\n    let colorRange;\r\n\r\n    const generateHeaders = NameList => {\r\n        let columnIds = NameList.map(el => chance.hash({length: 10}));\r\n        let defsList = [\r\n            {\r\n                headerName: 'Functional Area',\r\n                field: 'keyArea',\r\n                suppressSizeToFit: true,\r\n                pinned: 'left',\r\n                editable: true\r\n            },\r\n            {\r\n                field: 'groupHack',\r\n                headerName: '',\r\n                rowGroup: true,\r\n                pinned: 'left',\r\n                groupDefaultExpanded: true,\r\n                hide: true,\r\n                width: 5,\r\n                menuTabs: [],\r\n                sortable: false,\r\n                resizable: false,\r\n                filter: false,\r\n                cellClass: 'groupHack'\r\n            },\r\n            {\r\n                headerName: 'Total',\r\n                pinned: 'left',\r\n                valueGetter: params => {\r\n                    let total = 0;\r\n                    const colIds = Object.keys(params.data).map(curr => {\r\n                        if (curr !== 'keyArea' && curr !== 'y' && curr !== 'groupHack') {\r\n                            return curr;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    });\r\n                    var filtered = colIds.filter(el => el);\r\n                    filtered.map(el => {\r\n                        total += parseInt(params.data[el]);\r\n                    });\r\n                    return total;\r\n                },\r\n                editable: false,\r\n                aggFunc: 'sum',\r\n                cellClass: 'total-col center-text',\r\n                suppressSizeToFit: true,\r\n                width: 75,\r\n                menuTabs: [],\r\n                field: 'y',\r\n                cellStyle: params => {\r\n                    if (params.node.aggData) {\r\n                        aggDataRow = Object.values(params.node.aggData);\r\n                        aggDataRow.sort((a, b) => {\r\n                            return a - b;\r\n                        });\r\n                        //aggDataMax = aggData[aggData.length - 1];\r\n                    }\r\n                    if (params.node.data && !params.node.aggData) {\r\n                        if (aggRange.length === 0) {\r\n                            params.api.forEachNode(node => {\r\n                                if (!node.aggData) {\r\n                                    let vals = Object.values(node.data).filter(x => typeof x === 'number');\r\n                                    const total = vals.reduce((acc, curr) => acc + curr);\r\n                                    aggRange.push(total);\r\n                                }\r\n                            });\r\n                            aggRange.sort((a, b) => {\r\n                                return a - b;\r\n                            });\r\n                            colorRange = d3\r\n                                .scaleLinear()\r\n                                .domain([0, aggRange[aggRange.length - 1]])\r\n                                .interpolate(d3.interpolateHcl)\r\n                                .range([d3.rgb('#ff9396'), d3.rgb('#ade795')]);\r\n                        }\r\n                        let temp = Object.values(params.node.data);\r\n                        let vals = temp.filter(x => typeof x === 'number');\r\n                        let rowTotal = vals.reduce((acc, curr) => acc + curr);\r\n                        return {backgroundColor: colorRange(rowTotal)};\r\n                    }\r\n                }\r\n            }\r\n        ];\r\n        for (var i = 0; i < NameList.length; i++) {\r\n            let colDef = {};\r\n            colDef.headerName = NameList[i];\r\n            colDef.field = columnIds[i];\r\n            colDef.valueFormatter = params => {\r\n                return params.value === 0 ? '' : params.value;\r\n            };\r\n            colDef.editable = true;\r\n            colDef.cellClass = params => {\r\n                return `cell-color-${params.value} center-text`;\r\n            };\r\n            colDef.aggFunc = 'sum';\r\n            defsList.push(colDef);\r\n        }\r\n        return defsList;\r\n    };\r\n\r\n    const generateAreaNames = count => {\r\n        let areaNameList = [];\r\n        for (var i = 0; i < count; i++) {\r\n            areaNameList.push(chance.sentence({words: 3}));\r\n        }\r\n        return areaNameList;\r\n    };\r\n\r\n    const generateRow = (peopleList, areaName) => {\r\n        let newRow = {};\r\n        for (var i = 0; i < peopleList.length; i++) {\r\n            const temp = chance.natural({min: 0, max: 15});\r\n            newRow[peopleList[i].field] = temp > 5 ? 0 : temp;\r\n        }\r\n        newRow.keyArea = areaName;\r\n        newRow.groupHack = `x`;\r\n        return newRow;\r\n    };\r\n\r\n    const columnDefs = generateHeaders(NameList);\r\n    const areaNameList = generateAreaNames(chance.natural({min: 15, max: 40}));\r\n    for (var i = 1; i < areaNameList.length; i++) {\r\n        mockData.push(generateRow(columnDefs, areaNameList[i]));\r\n    }\r\n    return {rowData: mockData, columnDefs};\r\n};\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\nimport 'ag-grid-enterprise';\r\nimport {generateMockData} from './generate-mock-data';\r\nimport './styles.scss';\r\nimport Chance from 'chance';\r\n\r\nconst chance = new Chance();\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        const NameList = ['Matt', 'Nathan', 'Kalyan', 'Bill', 'John', 'Asuvani', 'Mark', 'Mike', 'Megan'];\r\n        const generatedData = generateMockData(NameList);\r\n        this.setState({rowData: generatedData.rowData, columnDefs: generatedData.columnDefs});\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [],\r\n            rowData: [{}],\r\n            defaultColDef: {\r\n                editable: true,\r\n                resizable: true,\r\n                sortable: true\r\n            },\r\n            newPerson: '',\r\n            functionalArea: ''\r\n        };\r\n    }\r\n\r\n    onGridReady = params => {\r\n        this.setState({\r\n            gridApi: params.api,\r\n            columnApi: params.columnApi\r\n        });\r\n        //this.state.gridApi.setRowData(this.state.rowData);\r\n        this.state.gridApi.sizeColumnsToFit();\r\n        window.addEventListener('resize', () => {\r\n            params.api.sizeColumnsToFit();\r\n        });\r\n    };\r\n\r\n    addPerson = event => {\r\n        event.preventDefault();\r\n        //let newColDef = {...this.state.columnDefs[this.state.columnDefs.length - 1]};\r\n        const newId = chance.hash({length: 10});\r\n        let newColDef = {\r\n            headerName: this.state.newPerson,\r\n            field: newId,\r\n            valueFormatter: params => {\r\n                return params.value === 0 ? '' : params.value;\r\n            },\r\n            editable: true,\r\n            cellClass: params => {\r\n                return `cell-color-${params.value} center-text`;\r\n            },\r\n            aggFunc: 'sum'\r\n        };\r\n\r\n        let updatedRowData = this.state.rowData.map(el => {\r\n            el[newId] = 0;\r\n            return el;\r\n        });\r\n\r\n        let temp = this.state.columnDefs.concat(newColDef);\r\n        this.state.gridApi.setColumnDefs(temp);\r\n        this.setState({rowData: updatedRowData, columnDefs: temp}, () => {\r\n            this.state.gridApi.sizeColumnsToFit();\r\n        });\r\n    };\r\n\r\n    addFunctionalArea = event => {\r\n        event.preventDefault();\r\n        const newId = chance.hash({length: 10});\r\n        const newArea = this.state.functionalArea;\r\n        let updatedRowData = this.state.rowData.map(el => {\r\n            el[newId] = 0;\r\n            return el;\r\n        });\r\n        let newRowData = {...this.state.rowData[this.state.rowData.length - 1]};\r\n        newRowData[newId] = 0;\r\n        Object.keys(newRowData).map(el => {\r\n            if (el === 'keyArea') {\r\n                newRowData[el] = newArea;\r\n            } else if (el !== 'groupHack') {\r\n                newRowData[el] = 0;\r\n            }\r\n        });\r\n        updatedRowData = updatedRowData.concat(newRowData);\r\n        this.setState({rowData: updatedRowData});\r\n    };\r\n\r\n    handleFAChange = e => {\r\n        this.setState({functionalArea: e.target.value});\r\n    };\r\n    handleAddPersonChange = e => {\r\n        this.setState({newPerson: e.target.value});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='app-container'>\r\n                <div\r\n                    className='ag-theme-balham'\r\n                    style={{\r\n                        height: '90vh',\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    <div className='actions-container'>\r\n                        <div className='action'>\r\n                            <label>\r\n                                Add Functional Area:\r\n                                <input type='text' className='action-input' onChange={this.handleFAChange} />\r\n                                <button onClick={this.addFunctionalArea}>Add</button>\r\n                            </label>\r\n                        </div>\r\n                        <div className='action'>\r\n                            <label>\r\n                                Add Person:\r\n                                <input type='text' className='action-input' onChange={this.handleAddPersonChange} />\r\n                                <button onClick={this.addPerson}>Add</button>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <AgGridReact\r\n                        onGridReady={this.onGridReady}\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        groupDefaultExpanded={1}\r\n                        suppressAggFuncInHeader={true}\r\n                        autoGroupColumnDef={{\r\n                            headerName: '',\r\n                            pinned: 'left',\r\n                            width: 1,\r\n                            resizable: false,\r\n                            filter: false,\r\n                            menuTabs: [],\r\n                            suppressSizeToFit: true,\r\n                            checkbox: false,\r\n                            cellRenderer: 'agGroupCellRenderer'\r\n                        }}\r\n                        defaultColDef={{\r\n                            sortable: true,\r\n                            resizable: true,\r\n                            filter: true\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}